import { registryItemFactory } from '@ngraveio/bc-ur'
import { languages } from './LanguageCodes'
import { Buffer } from 'buffer/'

/** CDDL
 
 metadata = {
 		? sync_id: bytes .size 16     ; Generated by the hardware wallet to identify 
 the device
 		? language: language_code,    ; Indicates the selected language selected 
 on the hardware wallet
 		? fw_version: string,         ; Firmware version of the hardware wallet
 		? device: string              ; Indicates the device name
 		* tstr => any                 ; Extendable new metadata
 }
 
 sync_id = 1
 language = 2
 fw_version = 3
 device = 4
 
 language_code = string ; following [ISO 639-1] Code (e.g. "en" for English, 
 "fr" for French, "nl" for Dutch and "es" for Spanish
 
 */

interface ICryptoPortfolioMetadata {
  syncId?: Buffer // Size 16
  languageCode?: keyof typeof languages // ISO 639-1 language codes
  firmwareVersion?: string
  device?: string
  [key: string]: any
}

export class PortfolioMetadata extends registryItemFactory({
  tag: 1404,
  URType: 'portfolio-metadata',
  keyMap: {
    syncId: 1,
    language: 2,
    firmwareVersion: 3,
    device: 4,
  },
  CDDL: `
    metadata = {
        ? sync_id: bytes .size 16     ; Generated by the hardware wallet to identify 
    the device
        ? language: language_code,    ; Indicates the selected language 
    on the hardware wallet
        ? fw_version: string,         ; Firmware version of the hardware wallet
        ? device: string              ; Indicates the device name
    }

    sync_id = 1
    language = 2
    fw_version = 3
    device = 4

    language_code = string ; following [ISO 639-1] Code (e.g. "en" for English, 
    ;"fr" for French, "nl" for Dutch and "es" for Spanish
  `,
}) {
  public data: ICryptoPortfolioMetadata

  constructor(metadata: ICryptoPortfolioMetadata = {}) {
    super(metadata)
    this.data = metadata
  }

  override verifyInput(input: ICryptoPortfolioMetadata): { valid: boolean; reasons?: Error[] } {
    const errors: Error[] = []

    if (input.languageCode && !languages[input.languageCode]) {
      errors.push(new Error('Invalid language code'))
    }

    if (input.syncId && input.syncId.length > 16) {
      errors.push(new Error('Sync id buffer size must be maximum 16'))
    }

    // TODO: make firmware version valid SemVer
    return {
      valid: errors.length === 0,
      reasons: errors.length > 0 ? errors : undefined,
    }
  }

  public getSyncId = () => {
    // should pad the left of the buffer with 0 if smaller than 16
    if (this.data.syncId) {
      return Buffer.concat([Buffer.alloc(16 - this.data.syncId.length), this.data.syncId])
    }

    return undefined
  }

  public getLanguageCode = () => this.data.languageCode
  public getFirmwareVersion = () => this.data.firmwareVersion
  public getDevice = () => this.data.device

  override preCBOR() {
    // Remove padding from sync id
    let padRemovedSyncId = this.data.syncId
    // Remove starting zeros from sync id buffer
    while (padRemovedSyncId && padRemovedSyncId[0] === 0) {
      padRemovedSyncId = padRemovedSyncId.slice(1)
    }

    const updatedData = {
      ...this.data,
      syncId: padRemovedSyncId,
    }

    return super.preCBOR(updatedData) as ICryptoPortfolioMetadata
  }
}
