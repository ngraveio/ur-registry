import {
    extend,
    DataItem,
    RegistryItem,
    DataItemMap
  } from "@keystonehq/bc-ur-registry";
import { ExtendedRegistryTypes } from "./RegistryType";
import { languages } from "./LanguageCodes";

const { RegistryTypes, decodeToDataItem } = extend;

/** CDDL
 * 
 * metadata = {
 * 		? sync_id: bytes .size 16     ; Generated by the hardware wallet to identify 
 * the device
 * 		? language: language_code,    ; Indicates the selected language selected 
 * on the hardware wallet
 * 		? fw_version: string,         ; Firmware version of the hardware wallet
 * 		? device: string              ; Indicates the device name
 * 		* tstr => any                 ; Extendable new metadata
 * }
 * 
 * sync_id = 1
 * language = 2
 * fw_version = 3
 * device = 4
 * 
 * language_code = string ; following [ISO 639-1] Code (e.g. "en" for English, 
 * "fr" for French, "nl" for Dutch and "es" for Spanish
 * 
 */

enum Keys {
  sync_id = 1,
  language = 2,
  fw_version = 3,
  device = 4,
}

export class CryptoSyncMetadata extends RegistryItem {
  private sync_id?: Buffer; // Size 16
  private language_code?: keyof typeof languages; // ISO 639-1 language codes
  private fw_version?: string;
  private device?: string;
  // Any any

  getRegistryType = () => ExtendedRegistryTypes.CRYPTO_SYNC_METADATA;

  constructor(
    sync_id?: Buffer,
    language_code?: keyof typeof languages,
    fw_version?: string,
    device?: string,
  ) {
    super();
    this.sync_id = sync_id;
    this.language_code = language_code;
    this.fw_version = fw_version;
    this.device = device;
  }

  public getSyncId = () => this.sync_id;
  public getLanguageCode = () => this.language_code;
  public getFirmwareVersion = () => this.fw_version;
  public getDevice = () => this.device;

  public toDataItem = () => {
    const map: DataItemMap = {};

    map[Keys.sync_id] = this.sync_id;
    map[Keys.language] = this.language_code;
    map[Keys.fw_version] = this.fw_version;
    map[Keys.device] = this.device;

    return new DataItem(map);
  };

  public static fromDataItem = (dataItem: DataItem) => {
    const map = dataItem.getData();

    const sync_id = map[Keys.sync_id];
    const language_code = map[Keys.language];
    const fw_version = map[Keys.fw_version];
    const device = map[Keys.device];
    // TODO: Could be anything as json. import anything

    return new CryptoSyncMetadata(sync_id, language_code, fw_version, device);
  }

  public static fromCBOR = (_cborPayload: Buffer) => {
    const dataItem = decodeToDataItem(_cborPayload);
    return CryptoSyncMetadata.fromDataItem(dataItem);
  };
}
  